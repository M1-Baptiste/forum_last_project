name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint

  test:
    name: Testing
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, thread, sender]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install root dependencies
        run: npm install
      - name: Install service dependencies
        run: cd ${{ matrix.service }} && npm install
      - name: Run tests for ${{ matrix.service }}
        run: npm run test:${{ matrix.service }}

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: git file://.

  sast-scan:
    name: SAST Analysis (CodeQL)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-push:
    name: Build and Push Docker images
    needs: [test, secret-scan, sast-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, thread, sender]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare repository name
        id: prep
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          echo "repo_lower=${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "Normalized repository: ${REPO_LOWER}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ steps.prep.outputs.repo_lower }}/${{ matrix.service }}
          tags: |
            type=sha,format=short,prefix=sha-
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Version Management
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate changelog
        run: npm run changelog

      - name: Commit changelog
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "docs(changelog): update changelog [skip ci]"
          file_pattern: CHANGELOG.md

  deploy:
    name: Deploy to AWS
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare variables
        id: prep
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "repo_lower=${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "sha_short=sha-${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "Repository: ${REPO_LOWER}"
          echo "Version: sha-${SHA_SHORT}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init -backend-config="bucket=mon-projet-forum-terraform-state" -backend-config="key=terraform.tfstate" -backend-config="region=eu-central-1"
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="github_repository=${{ steps.prep.outputs.repo_lower }}" \
            -var="app_version=${{ steps.prep.outputs.sha_short }}"
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="github_repository=${{ steps.prep.outputs.repo_lower }}" \
            -var="app_version=${{ steps.prep.outputs.sha_short }}"
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  destroy:
    name: Destroy Infrastructure
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init -backend-config="bucket=mon-projet-forum-terraform-state" -backend-config="key=terraform.tfstate" -backend-config="region=eu-central-1"
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}